
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Election Rooms
    match /electionRooms/{roomId} {
      // Temporarily make read/list more permissive to isolate the issue
      allow read: if true; 
      allow list: if true; // This is often the problematic one for dashboards if auth isn't right

      // Admin operations for creating rooms
      allow create: if request.auth != null &&
                       request.resource.data.title is string &&
                       request.resource.data.description is string &&
                       request.resource.data.isAccessRestricted is bool &&
                       request.resource.data.positions is list &&
                       request.resource.data.status in ['pending', 'active', 'closed'];
                       // createdAt will be handled by serverTimestamp() in the app code.

      // Update rule: Admins can update. Voters can trigger updates to positions/updatedAt via server action.
      allow update: if request.auth != null || // Admins can update anything
                      (
                        get(/databases/$(database)/documents/electionRooms/$(roomId)).data.status == 'active' && // Room must be active for vote updates
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['positions', 'updatedAt']) && // Only these fields can change
                        request.resource.data.updatedAt == request.time // Ensures updatedAt is a server timestamp
                        // Deeper validation of 'positions' increments is too complex for rules; relies on trusted server action.
                      );

      allow delete: if request.auth != null;
    }

    // User Votes (to prevent duplicate voting and record votes)
    match /userVotes/{voteId} {
      allow read: if request.auth != null; // Admins can read vote records

      // Allow creation of a vote record if the room is active and necessary data is present.
      // This is called by the recordUserVote server action.
      allow create: if isValidUserVoteCreation(request.resource.data.roomId, request.resource.data);
      
      // Generally, client-side updates/deletes of userVotes are not allowed.
    }
    
    // Helper functions
    function isValidUserVoteCreation(roomId, incomingVoteData) {
      let roomDoc = get(/databases/$(database)/documents/electionRooms/$(roomId));
      // Check if room exists and is active
      return roomDoc.exists && roomDoc.data.status == 'active' && 
             incomingVoteData.roomId == roomId &&
             incomingVoteData.userEmail is string && 
             incomingVoteData.votedAt == request.time && // Server timestamp for vote
             incomingVoteData.votesCast is map; // Ensure votesCast is a map (object)
    }
  }
}
