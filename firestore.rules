
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin (simplified: any authenticated Firebase user)
    function isAdmin() {
      return request.auth != null;
    }

    // Election Rooms Collection
    match /electionRooms {
      // Admins can list all election rooms (for dashboard)
      allow list: if isAdmin();
    }

    // Single Election Room Document
    match /electionRooms/{roomId} {
      // Admins can create new election rooms
      allow create: if isAdmin();

      // Reading an election room:
      // - Admins can read any room.
      // - Anyone can read if the room status is 'active' or 'closed' (for voting or seeing results).
      allow get: if isAdmin() ||
                    (resource.data.status == 'active' || resource.data.status == 'closed');

      // Updating an election room:
      // Rule 1: Admins can update any field.
      allow update: if isAdmin();
      // Rule 2: For recordUserVote (server action by voter):
      // Allow updating only 'positions' and 'updatedAt' if the room is 'active'.
      // This rule is only evaluated if the isAdmin() rule above fails (i.e., user is not an admin).
      // SECURITY NOTE: This is a simplification. Production apps should use a trusted server environment (e.g., Cloud Function with Admin SDK) for vote counting.
      allow update: if !isAdmin() && resource.data.status == 'active'
                       && request.resource.data.keys().hasOnly(['positions', 'updatedAt'])
                       && request.resource.data.size() == 2 // Ensures only these two fields are being sent for this specific update type
                       && request.resource.data.positions.size() == resource.data.positions.size(); // Basic check: number of positions doesn't change. Deeper validation is hard in rules.

      // Admins can delete election rooms
      allow delete: if isAdmin();
    }

    // User Votes Collection (tracks who has voted in which room)
    match /userVotes {
      // Admins can query all user votes.
      allow list: if isAdmin();
      // For checkUserHasVoted, if it's called by a voter, they need to query their own record.
      // This is complex for unauthenticated users identified by email.
      // The current checkUserHasVoted is a server action. If it uses Admin SDK, it bypasses rules.
      // If it uses client SDK on behalf of user, specific query rules would be needed.
      // Keeping this admin-only for queries for now simplifies rules. Application logic handles voter checks.
    }

    // Single User Vote Document
    match /userVotes/{voteId} {
      // Anyone can create a vote record (submit their vote) IF:
      // 1. The request provides a roomId and userEmail.
      // 2. The associated election room exists and is 'active'.
      allow create: if request.resource.data.roomId != null &&
                       request.resource.data.userEmail != null &&
                       get(/databases/$(database)/documents/electionRooms/$(request.resource.data.roomId)).data.status == 'active';

      // Admins can read specific vote records
      allow get: if isAdmin();

      // No one should update or delete vote records directly via client
      allow update, delete: if false;
    }
  }
}
